#!/bin/bash
#
#
#		#############################################################
#		#															#
#		#				   XZone 0.6 - Scytheri0n					#
#		#															#
#		#	 A simple command line utility to create a HomePass		#
#		#					   network on OS X.						#
#		#															#
#		#############################################################
#
#	Changelog:
#
#	0.6		-	Fixed a bug with setting the SSID for Nintendo World MACs. Added an
#				option to change preferences on start up, rather than having to reset
#				all preferences. Improved launch flag option handling. Shifted preference
#				checking forward to avoid changes being lost or ignored. Added logging to
#				file as default instead of verbose. Fixed piping of output for other
#				options. Added a To-Do list. Whoop! Switched to backing up of IS prefs
#				once only to avoid accidental overwrites. Switched to "lladdr" instead of
#				"ether" for "ifconfig". Actual MAC now logged instead of tweaked
#				variable. Made sure XZone support folder is only created if it doesn't
#				exist. Display settings after running a change prefs call. Removed SSIDs
#				no longer accepted by latest firmware. Allowed "0" as an option for cycle
#				frequency (i.e. Cycling disabled). Squashed a little tick on the
#				Lion's back. Added an upgrade check. Added custom MAC addresses added
#				by GBATemp users. Added actual Nintendo Zone MACs. Whew!
#
#	0.5		-	Preferences! XZone will now save user choices into a .plist and recall
#				them at next start. Fixed a little bug with the SSID array. Improved 
#				getting input from user on first run.
#
#	0.4		-	Improved Nintendo World function to ensure that "attwifi" SSID is used. 
#				Added SSIDs to allow for selecting SSID to spoof at start. Backs up
#				current IS config and MAC to allow user to revert on exit.
#
#	0.3		-	Corrected script to not mistakenly warn that 2 minutes is too low
#				a cycle rate as well as corrected skipping of "ff" MAC. Included Nintendo #				World MACs. Allowed starting from custom MAC increment. Cleaned up script.
#
#	0.2		-	Allow user to enter a custom cycle rate
#
#	0.1		-	Initial release.
#
#										To-Do
#
#	-	Work out how to bloody enable and disable IS via Terminal in Yosemite
#	-	Enable selection of interfaces to bridge
#	-	Allow bridging from iPhone on Yosemite
#	-	Should probably test out the code on <10.10.3
#	-	Streamline code
#	-	Make sure we can't parallel run!
#	-	Allow safe exit from traffic light close
#	-	Allow multiple launch options
#	-	Active Playtime setting
#	-	Improve disabled cycling
#	-	Create a GUI or AppleScript launcher (v1.0 milestone!)
#	-	Notification Centre integration (probably with GUI)
#	-	Comment code more clearly
#	-	Run as a daemon instead of via Terminal
#	-	Clean up SSIDs and their respective indices
#	-	Timestamp MAC usage to prevent abuse
#	-	Allow adding of own MACs to plist (and upload?!)
#	-	Enable resuming from arrays
#
########################################################################################

#										Variables

########################################################################################

MAC="4e:53:50:4f:4f:"					#	The initial 5 octets of the MAC
endHex=00								#	The 6th octet for the MAC
count=0									#	Count value for loops
finalMAC=""								#	The final MAC address that will be spoofed
sleepTime=120							#	How long the script must pause for
includeNW=0								#	Nintendo World MACs included or not
isFirstPass=1							#	Is the script running again?
launchFlag=""							#	Allows flags to be set at launch
useCustomMACs=0							#	User MACs included or not
useNZMACs=0								#	Nintendo Zone MACs included or not
userMAC=""								#	The custom MAC address to be used
osxvers=$(sw_vers -productVersion)		#	The OS X version number
version="0.6"							#	XZone version number

#	The original MAC address of the system
originalMAC=$(networksetup -getmacaddress Wi-Fi | awk '{print $3}')


########################################################################################

#											SSIDs
#
#	The following SSIDs have been extracted from
#	http://yls8.mtheall.com/ninupdates/3ds_nzonehotspots.php?version=v15360
#	and converted to hex in order to spoof the SSID using Internet Sharing.
#	I did not extract these SSIDs from the 3DS firmware and take no credit 
#	for that; all credit is directed to whomever did the extraction (let me
#	know if it was you and I will credit you appropriately!)
#
#	SSIDs are divided in to AP Name clusters with the SSID on the right and 
#	the corresponding hex value on the left.
#
#	NOTE: These will be moved to a separate .plist file in a later build
#

########################################################################################

#	AT&T WiFi Services
ssid[1]="61747477696669"									#	attwifi
ssid[2]="4d63446f6e616c647320467265652057694669"			#	McDonalds Free WiFi

#	McDonald's Germany
ssid[3]="4e5a404d634431"									#	NZ@McD1
ssid[4]="4e5a404d634432"									#	NZ@McD2

#	Wifine
ssid[5]="776966696e65"										#	wifine

#	FreeSpot
ssid[6]="4652454553504f54"									#	FREESPOT


#	NOA Internal
ssid[7]="6e6f6173703031"									#	noasp1
ssid[8]="6e6f6173703032"									#	noasp2

#	Boingo Wireless
ssid[9]="426f696e676f20486f7473706f74"						#	Boingo Hotspot
ssid[10]="626f696e676f20686f7473706f74"						#	boingo hotspot
ssid[11]="41544c2d57692d4669"								#	ATL-Wi-Fi
ssid[12]="546f726f6e746f2050656172736f6e2057692d4669"		#	Toronto Pearson Wi-Fi
ssid[13]="4157472d57694669"									#	AWG-WiFi
ssid[14]="434c544e4554"										#	CLTNET
ssid[15]="494e445f5055424c49435f57694669"					#	IND_PUBLIC_WiFi
ssid[16]="4c41582d57694669"									#	LAX-WiFi
ssid[17]="4d49412d57694669"									#	MIA-WiFi
ssid[18]="5244555f57694669"									#	RDU_WiFi
#	San.Diego.Airport.Free.WIFI
ssid[19]="53616e2e446965676f2e416972706f72742e467265652e57494649"	
ssid[20]="666c7973616372616d656e746f"						#	flysacramento

#	Bell Mobility
ssid[21]="686f7473706f745f42656c6c"							#	hotspot_Bell
ssid[22]="42454c4c57494649404d43444f4e414c4453"				#	BELLWIFI@MCDONALDS
#	Boulevard Saint-Laurent WIFI
ssid[23]="426f756c6576617264205361696e742d4c617572656e742057494649"

#	Nintendo
ssid[24]="4e696e74656e646f53706f745061737331"				#	NintendoSpotPass1
ssid[25]="4e696e74656e646f53706f745061737332"				#	NintendoSpotPass2

#	McDonald's Italy
ssid[26]="4e696e74656e646f5f5a6f6e6531"						#	Nintendo_Zone1

#	KPN
ssid[29]="4b504e"											#	KPN

#	Meteor
ssid[30]="4d4554454f52"										#	METEOR
ssid[31]="4d43444f4e414c4453"								#	MCDONALDS
ssid[32]="434153494e4f5f62795f4d4554454f52"					#	CASINO_by_METEOR

#	FreeHotspot.com
ssid[38]="667265652d686f7473706f742e636f6d"					#	free-hotspot.com
ssid[39]="686f7473706f742d677261747569742e636f6d"			#	hotspot-gratuit.com
ssid[40]="4175746f6772696c6c5f467265655f57694669"			#	Autogrill_Free_WiFi
ssid[41]="4175746f6772696c6c20467265652057694669"			#	Autogrill Free WiFi
ssid[42]="517569636b2057694669"								#	Quick WiFi
ssid[43]="517569636b2057692d4669"							#	Quick Wi-Fi
ssid[44]="517569636b5f57694669"								#	Quick_WiFi

#	O2 Wi-Fi
ssid[45]="4f322057696669"									#	O2 Wifi

#	Gowex Paris
ssid[46]="474f57455820465245452057694669"					#	GOWEX FREE WiFi

########################################################################################

#									Function Declarations

########################################################################################

function testForInteger {				#	Makes sure $inputTime is an integer
	re='^[0-9]+$'
	if ! [[ $inputTime =~ $re ]] ; then
 	  echo "You did not enter a valid number. Please try again."
 	  printf "Please enter the time (in minutes) you wish the script\nto cycle through addresses:  "
 	  read inputTime
 	  testForInteger
	fi
}

function testForHex {					#	Makes sure $startPoint is a valid octet
	case $startPoint in
	  ( "" )
        printf "Starting at "$MAC$endHex"\n"
        ;;
      ( *[!0-9A-Fa-f]* ) 
      	printf "\n\nNot a valid hex value"
      	printf "\nIf you would like to start at a specific MAC, enter the final\n2-digit hex value (octet) here. (This is useful if you have terminated\nthe script and wish to pick up where you left off) Otherwise, just hit return.\n"
      	read -n2 startPoint
      	testForHex
      	;;
      ( * )                
        case ${#startPoint} in
        2)
        	endHex=$startPoint
        	endHex=$((0x${endHex}))
        	printf "\n\nStarting at "$MAC$startPoint"\n"
        	;;
        *)
        	echo "Please make sure the value is two digits exactly."
      		printf "If you would like to start at a specific MAC, enter the final\n2-digit hex value (octet) here. (This is useful if you have terminated\nthe script and wish to pick up where you left off) Otherwise, just hit return.\n"
      		read -n2 startPoint
      		testForHex
      		;;
      	esac
        ;;
    esac
}

function spoofMAC {
	echo "Spoofing MAC!"
	ifconfig en1 lladdr $finalMAC		#	Set the MAC address to the value of 'finalMAC'
	echo "MAC spoofed to "$(ifconfig en1 lladdr | grep ether | awk '{print $2}')
	echo "Resetting Wi-Fi ..."
	sleep 1								#	Sleeping for slower systems
	ifconfig en1 down					#	Wi-Fi disabled
	sleep 1
	ifconfig en1 up						#	Enable Wi-Fi
	echo "Wi-Fi reset!"
	if [ $(echo ${osxvers:3:1}) == 7 ]; then
		echo "Toggling primary interface to re-enable IS"
		ifconfig en0 down
		sleep 1
		ifconfig en0 up
	fi
	sleep $sleepTime					#	Sleep for the requested duration
}

function setHex {
	while [ $endHex -lt 256 ]; do		#	While count value is less than 256, we have
										#	a valid hex value (as an integer)
		hex=$(printf "%02x" $endHex)	#	Converts the 6th MAC octet to hex
		endHex=$((endHex + 1))			#	Increment the 6th MAC octet
		finalMAC=$MAC$hex				#	Concat the 6th octet to the first 5
		defaults write ~/Library/Preferences/com.scytheri0n.xzone.plist StartOctet -data $hex
		spoofMAC						#	Run the spoofing function
	done

#	If count value is 255, we have exhausted all valid octet values and need to restart.

	endHex=0							#	Reset the 6th MAC octet
	defaults write ~/Library/Preferences/com.scytheri0n.xzone.plist StartOctet -data $endHex
	isFirstPass=0						#	Make sure we don't do any init stuff again
	
	additionalMACs
	
	echo "Starting again!"
	
	scriptStart							#	Run the script again

}

function additionalMACs {

	
	if [ $includeNW == 1 ]; then
		spoofNintendo
	fi
	if [ $useCustomMACs == 1 ]; then
		spoofCustomMACs
	fi
	if [ $useNZMACs == 1 ]; then
		spoofNintendoZones
	fi


}

function includeNintendo {

	printf "Would you like to include the Nintendo World MACs in the cycle? Y or N\n"
	read -n1 nintendoMACS					#	Find out if user wants to include Nintendo
										#	World MACs in the cycle
	case $nintendoMACS in
		y*)
			printf "\n\nIncluding Nintendo World MACs.\n\n"
			includeNW=1
			defaults write ~/Library/Preferences/com.scytheri0n.xzone.plist IncludeNintendoWorld -bool TRUE
			;;
		Y*)
			printf "\n\nIncluding Nintendo World MACs.\n\n"
			includeNW=1
			defaults write ~/Library/Preferences/com.scytheri0n.xzone.plist IncludeNintendoWorld -bool TRUE
			;;
		n*)
			printf "\n\nOmitting Nintendo World MACs.\n\n"
			includeNW=0
			defaults write ~/Library/Preferences/com.scytheri0n.xzone.plist IncludeNintendoWorld -bool FALSE
			;;
		N*)
			printf "\n\nOmitting Nintendo World MACs.\n\n"
			includeNW=0
			defaults write ~/Library/Preferences/com.scytheri0n.xzone.plist IncludeNintendoWorld -bool FALSE
			;;
		*)
			printf "\n\nPlease type either Y or N.\n\n"
			includeNintendo
			;;
	esac

}

function includeCustomMACs {

	printf "Would you like to include the GBATemp User MACs in the cycle? Y or N\n"
	read -n1 userinput
	
	case $userinput in
		y*)
			printf "\n\nIncluding GBATemp User MACs.\n\n"
			useCustomMACs=1
			defaults write ~/Library/Preferences/com.scytheri0n.xzone.plist UseCustomMACs -bool TRUE
			;;
		Y*)
			printf "\n\nIncluding GBATemp User MACs.\n\n"
			useCustomMACs=1
			defaults write ~/Library/Preferences/com.scytheri0n.xzone.plist UseCustomMACs -bool TRUE
			;;
		n*)
			printf "\n\nOmitting GBATemp User MACs.\n\n"
			useCustomMACs=0
			defaults write ~/Library/Preferences/com.scytheri0n.xzone.plist UseCustomMACs -bool FALSE
			;;
		N*)
			printf "\n\nOmitting GBATemp User MACs.\n\n"
			useCustomMACs=0
			defaults write ~/Library/Preferences/com.scytheri0n.xzone.plist UseCustomMACs -bool FALSE
			;;
		*)
			printf "\n\nPlease type either Y or N.\n\n"
			includeCustomMACs
			;;
	esac

}

function includeNZMACs {

	printf "Would you like to include real Nintendo Zone MACs in the cycle? Y or N\n"
	read -n1 userinput
	
	case $userinput in
		y*)
			printf "\n\nIncluding Nintendo Zone MACs.\n\n"
			useNZMACs=1
			defaults write ~/Library/Preferences/com.scytheri0n.xzone.plist UseNZMACs -bool TRUE
			;;
		Y*)
			printf "\n\nIncluding Nintendo Zone MACs.\n\n"
			useNZMACs=1
			defaults write ~/Library/Preferences/com.scytheri0n.xzone.plist UseNZMACs -bool TRUE
			;;
		n*)
			printf "\n\nOmitting Nintendo Zone MACs.\n\n"
			useNZMACs=0
			defaults write ~/Library/Preferences/com.scytheri0n.xzone.plist UseNZMACs -bool FALSE
			;;
		N*)
			printf "\n\nOmitting Nintendo Zone MACs.\n\n"
			useNZMACs=0
			defaults write ~/Library/Preferences/com.scytheri0n.xzone.plist UseNZMACs -bool FALSE
			;;
		*)
			printf "\n\nPlease type either Y or N.\n\n"
			includeNZMACs
			;;
	esac

}

function spoofNintendo {

echo "Spoofing Nintendo World MACs."

/usr/libexec/PlistBuddy -c "Set :SpoofingNW bool TRUE" ~/Library/Preferences/com.scytheri0n.xzone.plist

echo "We need to make sure we are broadcasting using the 'attwifi' SSID."

cp /Library/Preferences/SystemConfiguration/com.apple.airport.preferences.plist ~/Library/Application\ Support/XZone/com.apple.airport.preferences.edited.plist

defaults write /Library/Preferences/SystemConfiguration/com.apple.airport.preferences InternetSharing -dict-add SSID -data 61747477696669

echo "SSID set to 'attwifi'."

count=0									#	Set loop count to 0 so we know we will loop

while [ $count -lt 6 ]; do

	case $count in
		0)
			finalMAC="00:25:9C:52:1C:6A"
			spoofMAC
			count=$((count + 1))
			;;
		1)
			finalMAC="00:0D:67:15:2D:82"
			spoofMAC
			count=$((count + 1))
			;;
		2)
			finalMAC="00:0D:67:15:D7:21"
			spoofMAC
			count=$((count + 1))
			;;
		3)
			finalMAC="00:0D:67:15:D5:44"
			spoofMAC
			count=$((count + 1))
			;;
		4)
			finalMAC="00:0D:67:15:D2:59"
			spoofMAC
			count=$((count + 1))
			;;
		5)
			finalMAC="00:0D:67:15:D6:FD"
			spoofMAC
			count=$((count + 1))
			;;
		*)
			echo "We seem to have encountered an error. Script will now terminate."
			return 1
			scriptAbort
			;;
	esac
done

echo "Reverting SSID."

rm /Library/Preferences/SystemConfiguration/com.apple.airport.preferences.plist
mv ~/Library/Application\ Support/XZone/com.apple.airport.preferences.edited.plist /Library/Preferences/SystemConfiguration/com.apple.airport.preferences.plist

echo "SSID reverted."

/usr/libexec/PlistBuddy -c "Set :SpoofingNW bool FALSE" ~/Library/Preferences/com.scytheri0n.xzone.plist

count=0

}

function spoofCustomMACs {

	echo "Spoofing GBATemp user MACs so we can share the love!"
	
	/usr/libexec/PlistBuddy -c "Set :SpoofingCustom bool TRUE" ~/Library/Preferences/com.scytheri0n.xzone.plist

	count=0

	while [ count != -1 ]; do
		
		userMAC=$(/usr/libexec/PlistBuddy -c "Print :UserMACs:$count" ~/Library/Application\ Support/XZone/zonedata.plist 2>/dev/null)
		
		if [ ${#userMAC} == 17 ]; then
			finalMAC=$userMAC
			spoofMAC
			count=$((count + 1))
		else
			break 2
		fi
		
	done
	
	echo "We have spoofed all available GBATemp user MACs. The love has been shared."
	
	/usr/libexec/PlistBuddy -c "Set :SpoofingCustom bool FALSE" ~/Library/Preferences/com.scytheri0n.xzone.plist
	
	count=0

}

function spoofNintendoZones {

echo "Spoofing real Nintendo Zone MACs."

/usr/libexec/PlistBuddy -c "Set :SpoofingNZ bool TRUE" ~/Library/Preferences/com.scytheri0n.xzone.plist

cp /Library/Preferences/SystemConfiguration/com.apple.airport.preferences.plist ~/Library/Application\ Support/XZone/com.apple.airport.preferences.edited.plist

echo "We need to make sure we are broadcasting using the correct SSID."

ssidData=61747477696669

ssidName=$(echo "$ssidData" | xxd -r -p)

defaults write /Library/Preferences/SystemConfiguration/com.apple.airport.preferences InternetSharing -dict-add SSID -data $ssidData

echo "SSID set to "$ssidName

count=0									#	Set loop count to 0 so we know we will loop

while [ count != -1 ]; do
		
	userMAC=$(/usr/libexec/PlistBuddy -c "Print :NintendoZones:attwifi:$count" ~/Library/Application\ Support/XZone/zonedata.plist)
		
	if [ ${#userMAC} == 17 ]; then
		finalMAC=$userMAC
		spoofMAC
		count=$((count + 1))
	else
		break 2
	fi
		
done

count=0

echo "Cycling to 'KPN' SSID."

ssidData=4b504e

ssidName=$(echo "$ssidData" | xxd -r -p)

defaults write /Library/Preferences/SystemConfiguration/com.apple.airport.preferences InternetSharing -dict-add SSID -data $ssidData

echo "SSID set to "$ssidName

while [ count != -1 ]; do
		
	userMAC=$(/usr/libexec/PlistBuddy -c "Print :NintendoZones:KPN:$count" ~/Library/Application\ Support/XZone/zonedata.plist)
		
	if [ ${#userMAC} == 17 ]; then
		finalMAC=$userMAC
		spoofMAC
		count=$((count + 1))
	else
		break 2
	fi
		
done

count=0

echo "Cycling to 'BELLWIFI@MCDONALDS' SSID."

ssidData=42454c4c57494649404d43444f4e414c4453

ssidName=$(echo "$ssidData" | xxd -r -p)

defaults write /Library/Preferences/SystemConfiguration/com.apple.airport.preferences InternetSharing -dict-add SSID -data $ssidData

echo "SSID set to "$ssidName

while [ count != -1 ]; do
		
	userMAC=$(/usr/libexec/PlistBuddy -c "Print :NintendoZones:BELLWIFI@MCDONALDS:$count" ~/Library/Application\ Support/XZone/zonedata.plist)
		
	if [ ${#userMAC} == 17 ]; then
		finalMAC=$userMAC
		spoofMAC
		count=$((count + 1))
	else
		break 2
	fi
		
done

count=0

echo "Cycling to 'NZ@McD1' SSID."

ssidData=4e5a404d634431

ssidName=$(echo "$ssidData" | xxd -r -p)

defaults write /Library/Preferences/SystemConfiguration/com.apple.airport.preferences InternetSharing -dict-add SSID -data $ssidData

echo "SSID set to "$ssidName

while [ count != -1 ]; do
		
	userMAC=$(/usr/libexec/PlistBuddy -c "Print :NintendoZones:NZ@McD1:$count" ~/Library/Application\ Support/XZone/zonedata.plist)
		
	if [ ${#userMAC} == 17 ]; then
		finalMAC=$userMAC
		spoofMAC
		count=$((count + 1))
	else
		break 2
	fi
		
done

count=0

echo "Cycling to 'hotspot-gratuit.com' SSID."

ssidData=686f7473706f742d677261747569742e636f6d

ssidName=$(echo "$ssidData" | xxd -r -p)

defaults write /Library/Preferences/SystemConfiguration/com.apple.airport.preferences InternetSharing -dict-add SSID -data $ssidData

echo "SSID set to "$ssidName

while [ count != -1 ]; do
		
	userMAC=$(/usr/libexec/PlistBuddy -c "Print :NintendoZones:hotspot-gratuit.com:$count" ~/Library/Application\ Support/XZone/zonedata.plist)
		
	if [ ${#userMAC} == 17 ]; then
		finalMAC=$userMAC
		spoofMAC
		count=$((count + 1))
	else
		break 2
	fi
		
done

echo "We've cycled through all available (known) Nintendo Zones."	
echo "Reverting SSID."

rm /Library/Preferences/SystemConfiguration/com.apple.airport.preferences.plist
mv ~/Library/Application\ Support/XZone/com.apple.airport.preferences.edited.plist /Library/Preferences/SystemConfiguration/com.apple.airport.preferences.plist

echo "SSID reverted."

/usr/libexec/PlistBuddy -c "Set :SpoofingNZ bool FALSE" ~/Library/Preferences/com.scytheri0n.xzone.plist

count=0

}

function scriptStart {

	if [ $isFirstPass == 1 ]; then
		includeNintendo							#	Determine if we must include NW MACs

		setCycle								#	Determine cycle frequency

		setStartOctet							#	Determine starting octet for MAC

		setSSID									#	Determine which SSID to use
		
		includeCustomMACs						#	Determine if we must include custom
												#	MACs
												
		includeNZMACs							#	Determine if we must include NZ MACs
		
		currentPrefs

		printf "\nScript Starting!\n\n"
	fi

		if [ "$launchFlag" != "v" ]; then
			echo "This screen will not show any output, but XZone is still running!"
			exec 2>&1 >>~/Library/Logs/XZone.log
			currentPrefs
		fi
	
	setHex

}

function setCycle {

printf "Please enter the time (in minutes) you wish the script\nto cycle through addresses:  "

read inputTime							#	Get the cycle time from the user

testForInteger							#	Make sure the user enters a valid number

if [ $inputTime -gt 1 ]; then			#	Ensure cycle value is > 2
	sleepTime=$((inputTime * 60))
	echo "Script will cycle addresses every" $inputTime "minutes ("$sleepTime "seconds)."
else if [ $inputTime == 0 ]; then
	sleepTime=86400
	echo "Cycling disabled."
else
	sleepTime=120
	printf "Cycle value too low. Using default cycle of 2 minutes.\n\n"
fi
fi

defaults write ~/Library/Preferences/com.scytheri0n.xzone.plist CycleFrequency -int $sleepTime

}

function setStartOctet {

printf "\nIf you would like to start at a specific MAC, enter the final\n2-digit hex value (octet) here. (This is useful if you have terminated\nthe script and wish to pick up where you left off) Otherwise, just hit return.\n"

read -n2 startPoint						#	Get starting point from user

testForHex								#	Make sure user entered a valid 2 digit octet

}

function setSSID {

printf "\nWhich SSID would you like to use?\n1. attwifi		2. NZ@McD1		3. (More ...)\n"

read -n1 getSSID

case $getSSID in
	1)
		gotssid=${ssid[1]}					#	attwifi SSID
		;;
	2)
		gotssid=${ssid[3]}					#	NZ@McD1 SSID
		;;
	3)
		#	Allow selecting from all SSIDs
		printf "\n\nThe following is a list of all possible SSIDs that can\nbe used as StreetPass Relays:\n\n"
		printf "1. attwifi		2. McDonalds Free WiFi	3. NZ@McD1	\n\n4. NZ@McD2		5. wifine		6. FREESPOT	\n\n7. noasp1		8. noasp2		9. Boingo Hotspot	\n\n10. boingo hotspot	11. ATL-Wi-Fi		12. Toronto Pearson Wi-Fi	\n\n13. AWG-WiFi		14. CLTNET		15. IND_PUBLIC_WiFi	\n\n16. LAX-WiFi		17. MIA-WiFi		18. RDU_WiFi	\n\n19. San.Diego.Airport.Free.WIFI			20. flysacramento	\n\n21. hotspot_Bell	22. BELLWIFI@MCDONALDS	23. Boulevard Saint-Laurent WIFI	\n\n"
		read -p "Press any key to continue... " -n1 -s
		printf "\n\n24. NintendoSpotPass1	25. NintendoSpotPass2	26. Nintendo_Zone1	\n\n29. KPN	30. METEOR		31. MCDONALDS		\n\n32. CASINO_by_METEOR	38. free-hotspot.com	39. hotspot-gratuit.com	\n\n40. Autogrill_Free_WiFi	41. Autogrill Free WiFi	42. Quick WiFi	\n\n43. Quick Wi-Fi		44. Quick_WiFi		45. O2 Wifi	\n\n46. GOWEX FREE WiFi	\n\nPlease type the number of the SSID you wish to use:	"
		read -n2 getSSID
		while [ $getSSID -gt 46 ]; do
			printf "\n\nYou have made an invalid selection. Please try again."
			read -n2 getSSID
		done
		gotssid=${ssid[$getSSID]}
		;;
	*)
		printf "\n\nPlease type either 1, 2, or 3\n"
		setSSID
		;;
esac

defaults write /Library/Preferences/SystemConfiguration/com.apple.airport.preferences InternetSharing -dict-add SSID -data $gotssid

defaults write /Library/Preferences/SystemConfiguration/com.apple.airport.preferences InternetSharing -dict-add SecurityType -string "Open"

defaults write ~/Library/Preferences/com.scytheri0n.xzone.plist SSID -data $gotssid

ssidName=$(echo "$gotssid" | xxd -r -p)

printf "\nSSID set to "$ssidName

}

function scriptEnd {

printf "\n\nReverting Internet Sharing configuration ...\n"

sudo rm /Library/Preferences/SystemConfiguration/com.apple.airport.preferences.plist
sudo cp ~/Library/Application\ Support/XZone/com.apple.airport.preferences.plist /Library/Preferences/SystemConfiguration/com.apple.airport.preferences.plist

echo "Internet Sharing configuration reverted."
echo "Reverting MAC address ..."

sudo ifconfig en1 lladdr ${originalMAC}
sleep 1
sudo ifconfig en1 down
sleep 1
sudo ifconfig en1 up

echo "MAC address reverted."
printf "\n\nThanks for using XZone!\n\n"
return 0

}

function scriptAbort {

exec 1>&3 2>&4
printf "\n\nAborting script. Please wait while we clean up!"
scriptEnd
exit $?

}

function scriptQuit {

exec 1>&3 2>&4
printf "XZone now quitting. Please wait while we clean up!"
scriptEnd
exit $?

}

function checkPrefs {

if [ -e ~/Library/Preferences/com.scytheri0n.xzone.plist ]; then
	isFirstPass=0
	
	includeNW=$(defaults read ~/Library/Preferences/com.scytheri0n.xzone.plist IncludeNintendoWorld)
	
	sleepTime=$(defaults read ~/Library/Preferences/com.scytheri0n.xzone.plist CycleFrequency)
	
	hex=$(defaults read ~/Library/Preferences/com.scytheri0n.xzone.plist StartOctet)
	hex2=${hex#"<"}
	hex2=${hex2%">"}
	endHex=$((0x${hex2}))
	
	gotssid=$(defaults read ~/Library/Preferences/com.scytheri0n.xzone.plist SSID)
	ssid2=${gotssid#"<"}
	ssid2=${ssid2%">"}
	ssid2=$(echo -e "$ssid2" | tr -d '[[:space:]]')
	defaults write /Library/Preferences/SystemConfiguration/com.apple.airport.preferences InternetSharing -dict-add SSID -data $ssid2
	
	useCustomMACs=$(defaults read ~/Library/Preferences/com.scytheri0n.xzone.plist UseCustomMACs)
	
	useNZMACs=$(defaults read ~/Library/Preferences/com.scytheri0n.xzone.plist UseNZMACs)
	
	currentPrefs
fi

}

function usage {

printf "\nUsage:	xzone -[c][h][r][s][v]\nOptions:\n	-c	Change Options. Allows you to change individual options before the script runs.\n	-h	Help. Displays this help message.\n	-r	Reset. Resets saved preferences.\n	-s	Silent. Runs the program silently.\n	-v	Verbose. Logs output to stdout. This is the default\n		option if no options are passed.\n\n"
exit $?

}

function changeOpts {

echo "Which option would you like to change?"
echo "1.	Include Nintendo World		2.	Change Cycle Frequency"
echo "3.	Change Starting Octet		4.	Change SSID"
echo "5.	Include GBATemp User MACs	6.	Include real Nintendo Zones"
read -n1 getOption
echo ""
case $getOption in
	1)
		includeNintendo
		;;
	2)
		setCycle
		;;
	3)
		setStartOctet
		;;
	4)
		setSSID
		;;
	5)
		includeCustomMACs
		;;
	6)
		includeNZMACs
		;;
	*)
		echo "Invalid selection."
		changeOpts
		;;
esac

currentPrefs

printf "\nAre you done changing options? Y/N	"
read -n1 doneWithOpts
echo ""
if [ $doneWithOpts != "y" ]; then
	changeOpts
fi

}

function currentPrefs {

gotssid=$(defaults read ~/Library/Preferences/com.scytheri0n.xzone.plist SSID)
ssid2=${gotssid#"<"}
ssid2=${ssid2%">"}
ssid2=$(echo -e "$ssid2" | tr -d '[[:space:]]')
ssidName=$(echo "$ssid2" | xxd -r -p)

printf "\nYour current settings are:\nInclude Nintendo World: "
if [ $includeNW -gt 0 ]; then
	printf "True"
else
	printf "False"
fi
printf "\nInclude Custom MACs: "
if [ $useCustomMACs -gt 0 ]; then
	printf "True"
else
	printf "False"
fi
printf "\nInclude real Nintendo Zones: "
if [ $useNZMACs -gt 0 ]; then
	printf "True"
else
	printf "False"
fi
printf "\nCycle Frequency: "$((sleepTime / 60))" minutes."
printf "\nStarting Octet: "$(printf "%02x" $endHex)
printf "\nSSID: "$ssidName
printf "\n\n"

}

function checkVersion {

	echo "Please wait while we perform necessary upgrade measures ..."

	regVersion=$(/usr/libexec/PlistBuddy -c "Print :Version" ~/Library/Preferences/com.scytheri0n.xzone.plist 2>&1)
	
	if [ "$version" != "$regVersion" ]; then
		
		/usr/libexec/PlistBuddy -c "Add :Version string $version" ~/Library/Preferences/com.scytheri0n.xzone.plist
		/usr/libexec/PlistBuddy -c "Add :SpoofingNW bool FALSE" ~/Library/Preferences/com.scytheri0n.xzone.plist
		/usr/libexec/PlistBuddy -c "Add :SpoofingCustom bool FALSE" ~/Library/Preferences/com.scytheri0n.xzone.plist
		/usr/libexec/PlistBuddy -c "Add :SpoofingNZ bool FALSE" ~/Library/Preferences/com.scytheri0n.xzone.plist
		
		includeCustomMACs
		includeNZMACs
		
	fi
	
	echo "Done!"

}

#########################################################################################

while getopts hrsvc option
do
case $option in
	v)
		launchFlag="v"
		;;
	s)
		launchFlag="s"
		;;
	h)
		usage
		exit 1
		;;
	r)
		launchFlag="r"
		;;
	c)
		launchFlag="c"
		;;
	*)
		usage
		exit 1
		;;
esac
done

#	We need to check if we are running as root to execute some of the commands.
if [ $UID != 0 ]; then

	echo "We neet root privileges for this!"
    sudo "$0" "$@"
    exit $?
    
fi

clear									#	Clears the terminal window

date "+%nXZone Starting: %d/%m/%Y - %H:%M:%S%n" >>~/Library/Logs/XZone.log

exec 3>&1 4>&2
	
trap scriptAbort SIGINT SIGTERM

if [ ! -e ~/Library/Application\ Support/XZone/com.apple.airport.preferences.plist ]; then

	echo "Original IS settings not backed up."
	if [ ! -e ~/Library/Application\ Support/XZone ]; then
		echo "Creating XZone Support directory ..."
		mkdir ~/Library/Application\ Support/XZone
		echo "Done!"
	fi
	echo "Backing up now ..."
	cp /Library/Preferences/SystemConfiguration/com.apple.airport.preferences.plist ~/Library/Application\ Support/XZone/com.apple.airport.preferences.plist
	echo "Done!"
	
fi

if [ ! -e ~/Library/Application\ Support/XZone/zonedata.plist ]; then

	echo "We need to grab the Nintendo Zone data from the web, hold tight!"
	if [ ! -e ~/Library/Application\ Support/XZone ]; then
		echo "Creating XZone Support directory ..."
		mkdir ~/Library/Application\ Support/XZone
		echo "Done!"
	fi
	curl -o ~/Library/Application\ Support/XZone/zonedata.plist http://www.nyttfix.co.za/dropbox/zonedata.plist
	echo "Got it!"
	
fi

checkVersion							#	Check which version of XZone we are running

checkPrefs								#	Check for and set preferences

case $launchFlag in
	v)
		echo "Running verbose. All output will be displayed."
		exec > >(tee -a ~/Library/Logs/XZone.log)
		exec 2> >(tee -a ~/Library/Logs/XZone.log)
		;;
	s)
		if [ -e ~/Library/Preferences/com.scytheri0n.xzone.plist ]; then
			exec 2>&1 >>~/Library/Logs/XZone.log 
		else
			echo "No preferences exist. Script cannot be run silently without preferences."
		fi
		;;
	r)
		if [ -e ~/Library/Preferences/com.scytheri0n.xzone.plist ]; then
			sudo rm ~/Library/Preferences/com.scytheri0n.xzone.plist
		else
			echo "No preferences exist so there's nothing to reset. Silly!"
		fi
		;;
	c)
		if [ -e ~/Library/Preferences/com.scytheri0n.xzone.plist ]; then
			changeOpts
			echo "This screen will not show any output, but XZone is still running!"
			exec 2>&1 >>~/Library/Logs/XZone.log
		else
			echo "No preferences exist so there's nothing to change! Silly!"
		fi
		;;
	*)
		;;
esac

scriptStart								#	Start running the script proper

scriptEnd								#	Perform a cleanup before quit
